                        E-commerce website

                         front end - Angular

        1. create angular project - ng new project-name

        2. Run angular project - ng serve

        3. add bootstrap, fontawesome and google fonts in index.html

        4. Lazy load the commonly used HTML pages inside a module
            ng g m products --route products --module app.module

        5. add router outlet selector inside the root component HTML page

        6. create component shoud be lazy loaded in the products module
            all products = ng g c products/all-products
            cart  =ng g c products/cart
            wishlist =ng g c products/wishlist
            page-not-found = ng g c page-not-found (to display a bad page request from user)
            header = ng g c header
            footer  = ng g c header

        7. set path for each component in products routing module (because it was lazy load)
            -to redirect from localhost:4200 to specific route

        8. Design components

        24. Create angular sevice
                -ng g s services/api
        25. import HttpClientModule in product Module
        26. Dependancey inject HttpClient Class  in api service ts file
        27. call the api in allproduct component
        28. import the product module in AppModule


                        Mongodb

        9. store all products details in mongodb as a database
            
            
            
            Create the backend using - node and express js

        10. create a folder for server
        11. create a package.json file, command - npm init
        12. create index.js file
        13. install express - npm i express
        14. import express inside index.js file  - const express = require('express')
        15. using express create a server application
                const app = express()
        16. set up the port for application server -
                 app.listen(3000, ()=>{
                        console.log('server started at 3000');
                            })

        17. Use Json parser in server application-
                app.use(express.json())
        18. install cors protocol inside server : 
                npm i cors
        19. import cors inside index.js - 
                const cors = require('cors')
        20. Using cors specify origin to server app
                app.use(cors({
                   origin:'http://localhost:4200'
                }))
        21. install mongoose to establish connection between server and mongodb
                 npm i mongoose
        22. using mongoose establish the connection between serve and mongodb
                - create a service folder
                - create db.js file
                - import mongoose in db.js file
                    const mongoose = require('mongoose')
                - using mongoose define the connection string
                    mongoose.connect('mongodb://localhost:27017/onlinecart',()=>{
                        console.log('Mongodb connected successfully');
                    })   
                - Define a model for products
                        const Product = mongoose.model('Product', {
                                         id: Number,
                                         title: String,
                                         price: Number,
                                         description: String,
                                         category: String,
                                         image: String,
                                         rating: {
                                         rate : Number,
                                        count: Number
                                    }      
                                })     
                - Export the model so that it can be used in another file
                        module.exports={
                             Product
                        }
        23. Resolving API in index.js



